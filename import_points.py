import bpy
import bmesh

mats = [None, None, None]

cols = [(1.0, 0.0, 0.0), (0.0, 1.0, 0.0), (0.0, 0.0, 1.0)]
for i in range (0, 3) :
    mats[i] = bpy.data.materials.get("mat_" + str(i))
    if not mats[i]:
        mats[i] = bpy.data.materials.new("mat_" + str(i))
        mats[i].diffuse_color = cols[i]

max_locs = [None] * 109
sdl_locs = [None] * 31
min_locs = [None] * 108
max_locs[0] = (0.142189, -1.076243, -0.041442)
max_locs[1] = (0.073942, -0.371733, -0.919442)
max_locs[2] = (0.000000, -0.765592, 0.631338)
max_locs[3] = (0.023393, -0.997091, -0.519655)
max_locs[4] = (0.021277, -1.118615, -0.254194)
max_locs[5] = (0.274211, -0.908798, 0.288151)
max_locs[6] = (0.145043, -0.350165, -0.919442)
max_locs[7] = (0.260230, -0.662995, -0.710024)
max_locs[8] = (0.145043, -0.350165, 0.919442)
max_locs[9] = (0.426245, -0.748984, -0.578306)
max_locs[10] = (0.453402, -0.873742, -0.425476)
max_locs[11] = (0.178665, -0.334258, 0.919442)
max_locs[12] = (0.062878, -0.094104, 0.988791)
max_locs[13] = (0.259392, -0.388220, -0.877697)
max_locs[14] = (0.601244, -0.732618, 0.288887)
max_locs[15] = (0.296223, -0.361012, -0.877763)
max_locs[16] = (0.497718, -0.504760, -0.710358)
max_locs[17] = (0.495208, -0.495208, 0.703710)
max_locs[18] = (0.528819, -0.727153, -0.489666)
max_locs[19] = (0.569690, -0.797454, -0.314511)
max_locs[20] = (0.541356, -0.444279, 0.703710)
max_locs[21] = (0.730778, -0.606610, -0.291317)
max_locs[22] = (0.094104, -0.062878, 0.988791)
max_locs[23] = (0.474139, -0.348929, -0.859673)
max_locs[24] = (0.869243, -0.464619, 0.097545)
max_locs[25] = (0.845373, -0.350165, 0.380845)
max_locs[26] = (0.647020, -0.268004, 0.703710)
max_locs[27] = (0.719203, -0.475339, -0.716579)
max_locs[28] = (0.193657, -0.039002, -0.976062)
max_locs[29] = (0.748822, -0.407793, -0.856025)
max_locs[30] = (0.974655, -0.115903, -0.209565)
max_locs[31] = (0.286112, -0.028179, 0.952332)
max_locs[32] = (0.929547, 0.184899, 0.288887)
max_locs[33] = (0.750882, 0.149360, 0.631338)
max_locs[34] = (0.807677, 0.539673, 0.194153)
max_locs[35] = (0.675185, 0.360894, 0.631338)
max_locs[36] = (0.773995, 0.402166, -0.476258)
max_locs[37] = (0.444309, 0.444203, -0.769345)
max_locs[38] = (0.541475, 0.443970, -0.703941)
max_locs[39] = (0.330141, 0.330100, -0.877697)
max_locs[40] = (0.296178, 0.554110, -0.769288)
max_locs[41] = (0.200186, 0.982660, -0.006033)
max_locs[42] = (0.037573, 0.123861, 0.987190)
max_locs[43] = (0.091083, 0.457903, -0.877675)
max_locs[44] = (0.072635, 0.703410, -0.707167)
max_locs[45] = (0.112325, 0.870690, -0.580279)
max_locs[46] = (0.132414, 0.944998, -0.509664)
max_locs[47] = (0.198651, 0.930040, -0.398288)
max_locs[48] = (0.123396, 1.028238, -0.022797)
max_locs[49] = (0.007701, 0.712795, -0.710380)
max_locs[50] = (-0.142659, 1.047029, 0.054559)
max_locs[51] = (-0.045761, 0.464620, -0.877675)
max_locs[52] = (-0.099152, 0.832152, -0.674826)
max_locs[53] = (-0.000547, 0.949293, -0.622341)
max_locs[54] = (0.101699, 1.079643, -0.468933)
max_locs[55] = (0.049946, 1.136629, -0.501790)
max_locs[56] = (-0.142522, 1.175607, -0.221917)
max_locs[57] = (-0.037573, 0.123861, 0.987190)
max_locs[58] = (-0.327558, 0.990941, 0.054559)
max_locs[59] = (-0.135525, 0.446765, -0.877675)
max_locs[60] = (-0.445927, 0.837194, 0.288161)
max_locs[61] = (-0.348848, 0.522773, -0.769478)
max_locs[62] = (-0.319110, 0.742819, -0.667530)
max_locs[63] = (-0.061015, 0.114151, 0.987190)
max_locs[64] = (-0.693364, 0.711604, -0.006033)
max_locs[65] = (-0.601244, 0.732618, 0.288887)
max_locs[66] = (-0.398582, 0.485693, -0.769294)
max_locs[67] = (-0.750882, 0.616233, 0.194153)
max_locs[68] = (-0.100054, 0.082112, -0.987190)
max_locs[69] = (-0.835838, 0.446765, -0.288887)
max_locs[70] = (-0.806970, 0.431335, -0.380845)
max_locs[71] = (-0.617628, 0.330129, -0.703710)
max_locs[72] = (-0.670374, 0.203477, -0.703916)
max_locs[73] = (-0.790167, 0.240940, -0.555018)
max_locs[74] = (-0.123861, 0.037573, -0.987190)
max_locs[75] = (-0.943183, 0.092896, 0.288887)
max_locs[76] = (-0.921123, 0.009345, -0.653612)
max_locs[77] = (-0.616233, -0.122576, 0.769288)
max_locs[78] = (-0.547589, -0.053933, 0.827476)
max_locs[79] = (-1.087564, 0.067176, -0.556256)
max_locs[80] = (-1.107321, 0.007535, -0.588891)
max_locs[81] = (-1.151353, 0.011724, -0.508758)
max_locs[82] = (-0.193456, -0.038480, -0.975674)
max_locs[83] = (-0.446765, -0.135524, -0.877675)
max_locs[84] = (-0.601244, -0.182385, 0.769288)
max_locs[85] = (-1.017807, -0.092241, -0.649507)
max_locs[86] = (-1.140750, -0.067851, -0.520659)
max_locs[87] = (-1.097421, -0.166069, -0.508758)
max_locs[88] = (-0.921859, -0.407913, -0.421547)
max_locs[89] = (-0.114151, -0.061014, -0.987190)
max_locs[90] = (-0.094104, -0.062878, -0.988791)
max_locs[91] = (-0.591804, -0.485681, 0.631338)
max_locs[92] = (-0.547980, -0.819179, -0.097933)
max_locs[93] = (-0.062878, -0.094104, -0.988791)
max_locs[94] = (-0.601244, -0.732618, 0.288887)
max_locs[95] = (-0.425340, -0.636567, 0.631338)
max_locs[96] = (-0.178665, -0.334258, -0.919441)
max_locs[97] = (-0.293068, -0.707497, -0.631410)
max_locs[98] = (-0.446764, -0.835837, -0.288887)
max_locs[99] = (-0.061015, -0.114150, -0.987190)
max_locs[100] = (-0.179062, -0.874467, -0.476159)
max_locs[101] = (-0.283353, -0.932379, -0.195273)
max_locs[102] = (-0.195513, -0.951357, -0.297507)
max_locs[103] = (-0.287665, -0.948099, -0.000135)
max_locs[104] = (-0.022080, -0.111003, 0.988791)
max_locs[105] = (-0.073942, -0.371733, -0.919442)
max_locs[106] = (-0.222592, -0.733346, -0.631626)
max_locs[107] = (-0.075040, -0.761897, 0.631338)
max_locs[108] = (-0.118480, -1.025820, -0.115307)
sdl_locs[0] = (0.000000, -0.379016, -0.919442)
sdl_locs[1] = (0.014229, -1.065657, -0.442124)
sdl_locs[2] = (0.075483, -0.182231, 0.975674)
sdl_locs[3] = (0.110021, -0.362691, -0.919441)
sdl_locs[4] = (0.469479, -0.905292, -0.335230)
sdl_locs[5] = (0.259267, -0.485502, -0.827568)
sdl_locs[6] = (0.220080, -0.411741, -0.877675)
sdl_locs[7] = (0.331207, -0.332930, -0.879761)
sdl_locs[8] = (0.910608, -0.377186, 0.097545)
sdl_locs[9] = (0.111003, -0.022080, -0.988791)
sdl_locs[10] = (0.282777, -0.058173, -0.953886)
sdl_locs[11] = (0.732618, -0.222237, 0.631338)
sdl_locs[12] = (0.947758, -0.000000, 0.288887)
sdl_locs[13] = (0.732618, 0.222238, 0.631338)
sdl_locs[14] = (0.875614, 0.362691, 0.288887)
sdl_locs[15] = (-0.091082, 0.457903, -0.877675)
sdl_locs[16] = (-0.033257, 0.829531, -0.667530)
sdl_locs[17] = (-0.233096, 1.028998, 0.051625)
sdl_locs[18] = (-0.582262, 0.389149, -0.703746)
sdl_locs[19] = (-0.707523, 0.293164, -0.631545)
sdl_locs[20] = (-0.625273, -0.061584, 0.769288)
sdl_locs[21] = (-0.281975, -0.056088, -0.952332)
sdl_locs[22] = (-0.123861, -0.037572, 0.987190)
sdl_locs[23] = (-0.580479, -0.240442, 0.769288)
sdl_locs[24] = (-1.021626, -0.282071, -0.473053)
sdl_locs[25] = (-0.080029, -0.080029, -0.988791)
sdl_locs[26] = (-0.389134, -0.582256, -0.703762)
sdl_locs[27] = (-0.363236, -0.876734, -0.289330)
sdl_locs[28] = (-0.203292, -0.670165, 0.703710)
sdl_locs[29] = (-0.255417, -0.839678, -0.470645)
sdl_locs[30] = (0.000000, 0.000001, -0.998999)
min_locs[0] = (0.062428, -0.709721, -0.708758)
min_locs[1] = (-0.000119, -0.628550, -0.769385)
min_locs[2] = (0.061128, -0.626211, -0.769659)
min_locs[3] = (-0.054958, -1.027952, -0.425476)
min_locs[4] = (0.019732, -0.200338, 0.975273)
min_locs[5] = (-0.052386, -1.079027, -0.236695)
min_locs[6] = (0.075483, -0.182231, -0.975674)
min_locs[7] = (0.159500, -0.527011, -0.827659)
min_locs[8] = (0.338314, -0.721581, -0.649675)
min_locs[9] = (0.355877, -0.962019, -0.442124)
min_locs[10] = (0.109584, -0.164004, 0.975674)
min_locs[11] = (0.305692, -0.457629, -0.827541)
min_locs[12] = (0.695198, -0.700547, 0.096123)
min_locs[13] = (0.485681, -0.591804, 0.631338)
min_locs[14] = (0.603401, -0.806840, -0.115307)
min_locs[15] = (0.676998, -0.567525, -0.477776)
min_locs[16] = (0.155613, -0.127708, 0.975273)
min_locs[17] = (0.164015, -0.109611, -0.975694)
min_locs[18] = (0.317365, -0.216354, -0.923749)
min_locs[19] = (0.636567, -0.522417, 0.552901)
min_locs[20] = (0.496555, -0.426859, -0.790345)
min_locs[21] = (0.593118, -0.397596, -0.844826)
min_locs[22] = (0.634852, -0.381809, -0.874580)
min_locs[23] = (0.707316, -0.292979, 0.631338)
min_locs[24] = (0.897017, -0.412609, -0.587598)
min_locs[25] = (0.371733, -0.073942, 0.919442)
min_locs[26] = (0.928599, -0.331437, -0.330836)
min_locs[27] = (0.123861, -0.037572, 0.987190)
min_locs[28] = (0.943183, -0.286111, 0.097545)
min_locs[29] = (0.688444, -0.310320, -0.909123)
min_locs[30] = (0.843080, -0.389069, -0.809878)
min_locs[31] = (0.113178, 0.000000, -0.988791)
min_locs[32] = (0.971385, -0.000000, 0.194153)
min_locs[33] = (0.200489, 0.019341, -0.975564)
min_locs[34] = (0.856675, 0.170404, 0.469127)
min_locs[35] = (0.819526, 0.080717, 0.552901)
min_locs[36] = (0.835838, 0.253549, 0.469127)
min_locs[37] = (0.788032, 0.239047, 0.552901)
min_locs[38] = (0.123861, 0.037573, -0.987190)
min_locs[39] = (0.897443, 0.371733, 0.194153)
min_locs[40] = (0.114151, 0.061015, -0.987190)
min_locs[41] = (0.094104, 0.062879, -0.988791)
min_locs[42] = (0.389104, 0.389027, -0.827517)
min_locs[43] = (0.305700, 0.457513, -0.827475)
min_locs[44] = (0.330129, 0.617629, -0.703710)
min_locs[45] = (0.075483, 0.182232, 0.975674)
min_locs[46] = (0.058437, 0.192640, 0.975273)
min_locs[47] = (0.107348, 0.539674, -0.827476)
min_locs[48] = (0.057868, 0.917170, -0.603024)
min_locs[49] = (0.137082, 1.046393, -0.132602)
min_locs[50] = (0.000000, 0.197246, 0.975674)
min_locs[51] = (-0.022080, 0.111004, 0.988791)
min_locs[52] = (-0.038481, 0.193456, 0.975674)
min_locs[53] = (-0.020820, 1.109070, -0.066050)
min_locs[54] = (-0.053722, 0.547932, -0.827658)
min_locs[55] = (-0.033927, 1.077586, -0.587337)
min_locs[56] = (-0.187008, 1.110420, -0.087042)
min_locs[57] = (-0.210203, 0.508955, -0.827793)
min_locs[58] = (-0.259170, 0.485610, -0.827658)
min_locs[59] = (-0.295333, 0.555477, -0.770020)
min_locs[60] = (-0.094896, 0.177538, 0.975273)
min_locs[61] = (-0.109584, 0.164004, 0.975674)
min_locs[62] = (-0.080029, 0.080029, 0.988791)
min_locs[63] = (-0.686063, 0.688184, 0.193451)
min_locs[64] = (-0.485681, 0.398589, -0.769288)
min_locs[65] = (-0.636403, 0.425606, -0.631481)
min_locs[66] = (-0.702639, 0.588048, -0.384895)
min_locs[67] = (-0.759646, 0.510253, -0.381858)
min_locs[68] = (-0.787023, 0.528179, -0.289761)
min_locs[69] = (-0.094104, 0.062879, 0.988791)
min_locs[70] = (-0.100054, 0.082112, 0.987190)
min_locs[71] = (-0.182232, 0.075483, -0.975674)
min_locs[72] = (-0.177538, 0.094896, -0.975273)
min_locs[73] = (-0.808066, 0.335230, -0.470213)
min_locs[74] = (-0.601244, 0.182386, -0.769288)
min_locs[75] = (-0.733450, 0.222975, -0.632163)
min_locs[76] = (-0.912051, 0.279650, -0.293957)
min_locs[77] = (-0.113178, 0.000000, -0.988791)
min_locs[78] = (-0.970802, 0.098851, 0.190083)
min_locs[79] = (-1.138351, -0.040123, -0.267702)
min_locs[80] = (-0.192640, -0.058436, 0.975273)
min_locs[81] = (-0.350165, -0.145043, -0.919442)
min_locs[82] = (-0.732618, -0.222237, 0.631338)
min_locs[83] = (-0.770312, -0.411740, 0.469127)
min_locs[84] = (-0.155613, -0.127708, -0.975273)
min_locs[85] = (-0.425548, -0.636382, -0.631545)
min_locs[86] = (-0.458046, -0.684242, -0.553431)
min_locs[87] = (-0.259381, -0.388190, 0.877675)
min_locs[88] = (-0.606359, -0.728084, -0.293957)
min_locs[89] = (-0.625273, -0.761897, 0.097545)
min_locs[90] = (-0.135525, -0.253548, -0.952332)
min_locs[91] = (-0.259381, -0.485267, -0.827475)
min_locs[92] = (-0.210570, -0.508360, -0.827475)
min_locs[93] = (-0.388191, -0.726254, -0.552901)
min_locs[94] = (-0.334725, -0.807930, -0.469506)
min_locs[95] = (-0.372077, -0.898150, -0.194433)
min_locs[96] = (-0.457902, -0.856675, -0.194153)
min_locs[97] = (-0.094896, -0.177537, 0.975273)
min_locs[98] = (-0.061015, -0.114150, 0.987190)
min_locs[99] = (-0.166065, -0.818790, -0.557294)
min_locs[100] = (-0.038481, -0.193456, -0.975674)
min_locs[101] = (-0.038481, -0.193455, 0.975674)
min_locs[102] = (-0.091082, -0.457902, -0.877675)
min_locs[103] = (-0.170403, -0.856675, 0.469127)
min_locs[104] = (-0.239046, -0.788031, 0.552901)
min_locs[105] = (-0.080716, -0.819525, 0.552901)
min_locs[106] = (-0.110904, -0.921210, -0.489666)
min_locs[107] = (-0.124449, -1.008018, -0.314511)

locs = [max_locs, sdl_locs, min_locs]

bpyscene = bpy.context.scene

# create empty object as parent
points_holder = bpy.data.objects.new('points_holder', None)
bpyscene.objects.link(points_holder)

for i in range (0, 3) :
    for loc in locs[i]:
        mesh = bpy.data.meshes.new('Basic_Sphere')
        basic_sphere = bpy.data.objects.new("Basic_Sphere", mesh)
        bpyscene.objects.link(basic_sphere)
        bpyscene.objects.active = basic_sphere
        basic_sphere.select = True
        basic_sphere.parent = points_holder
        basic_sphere.location = loc
        basic_sphere.active_material = mats[i]
        bm = bmesh.new()
        bmesh.ops.create_icosphere(bm, subdivisions=1, diameter=0.02)
        bm.to_mesh(mesh)
        bm.free()

# for fldr in range (0, 3):
#     for i in range (0, file_nums[fldr]):
#         file_loc = 'C:\\Users\\Clara\\Documents\\ssq1\\models\\' + dir_names[fldr] + '\\'
#         imported_object = bpy.ops.import_scene.obj(filepath=file_loc+"icosphere" + str(i) + ".obj")
#         obj_object = bpy.context.selected_objects[0] ####<--Fix
#         obj_object.parent = points_holder
#         obj_object.active_material = mats[fldr]
